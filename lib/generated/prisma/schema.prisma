// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String?
  firebaseUid String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  addresses   Address[]
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Decimal          @db.Decimal(10, 2)
  images      String[]
  slug        String           @unique
  category    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  inStock     Boolean          @default(true)
  drop        Drop?            @relation(fields: [dropId], references: [id])
  dropId      String?
  orderItems  OrderItem[]
  variants    ProductVariant[]
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size       String
  color      String?
  sku        String      @unique
  stock      Int         @default(0)
  orderItems OrderItem[]
}

model Drop {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(false)
  password    String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id                    String      @id @default(uuid())
  orderNumber           String      @unique
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  status                OrderStatus @default(PENDING)
  total                 Decimal     @db.Decimal(10, 2)
  shippingAddressId     String?
  shippingAddress       Address?    @relation(fields: [shippingAddressId], references: [id])
  stripePaymentIntentId String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String
  city       String
  state      String
  postalCode String
  country    String   @default("United States")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
